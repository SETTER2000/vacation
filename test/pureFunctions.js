/*
* ЧИСТЫЕ ФУНКЦИИ
* Чистой функцией называют функцию, которая возвращает значение, вычисляемое
* на основе ее аргументов.
* Чистые функции получают как минимум один аргумент и всегда возвращают значение или другую функцию.
* Эти функции не имеют побочных эффектов, не устанавливают значений глобальных переменных и не
* изменяют ничего, что относится к состоянию приложения. Они рассматривают свои аргументы в
* качестве неизменяемых данных.
* (стр 50, React & Redux)
* */

const frederick = {
    name: "Frederick Douglass",
    canRead: false,
    canWrite: false
};
const selfEducate = person =>
    ({
        ...person,
        canRead: true,
        canWrite: true
    });
console.log(selfEducate(frederick));
console.log(frederick);
// {name: "Frederick Douglass", canRead: true, canWrite: true}
// {name: "Frederick Douglass", canRead: false, canWrite: false}

// Теперь изучим функцию с побочным эффектом, вносящую изменения в DOM:
// Это функция с побочным эффектом. Она не возвращает функцию или значение и создает побочный эффект
function Header(text) {
    let h1 = document.createElement('h1');
    h1.innerText = text;
    document.body.appendChild(h1);
}

Header("Header() caused side effects");


/*
 * В React пользовательский интерфейс (UI) выражается с помощью чистых функций.
 * Эта функция создаст элемент, состоящий из одного заголовка первого формата, а использование
 * данного элемента для изменения DOM будет возложено на какую-то другую часть
 * приложения:
 * Чистые функции являются еще одной ключевой концепцией функционального
 * программирования. Они существенно облегчат вашу работу, поскольку не станут
 * влиять на состояние приложения. При написании функций старайтесь следовать трем правилам.
 * 1. Функция должна получать как минимум один аргумент.
 * 2. Функция должна возвращать значение или другую функцию.
 * 3. Функция не должна вносить какие-либо изменения в переданные ей аргументы.
 * */
const Header = (props) => <h1>{props.title}</h1>